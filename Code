
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
import sklearn
from string import punctuation

data = pd.read_csv("/Users/lizdeschaine/Documents/DATS6102/loan.csv", usecols=("purpose", "title","id"))

#makes the values string
data['title'] = data['title'].astype(str)

#creates a list of all titles under purpose = other
other_index = data[data['purpose'] == "other"].index.tolist()

bad_list =['if','the',"on","and","for","my", "to", "a", "off", "pay", "loan", "other", "payoff"]


key_list = []
word_list=[]
for i in other_index:
    local_list=[]
    local_list = data['title'][i].split()
    for word in local_list:
        word = word.lower()   
        for p in list(punctuation):
            word=word.replace(p,'')
        if word not in bad_list:
            word_list.append(word)
            key_list.append(data['id'][i])

words_df = pd.DataFrame()
words_df['id'] = key_list
words_df['word'] = word_list

#merge data 
full_data = pd.read_csv("/Users/lizdeschaine/Documents/DATS6102/loan.csv")
#only use the first 30 columns
full_data = full_data.ix[:,:30]
#merge
merge_df = pd.merge(full_data, words_df, on='id')


def loan_stat_num(x):
    if x == "Charged Off":
        return 0
    if x == "Current":
        return 1
    if x == "Default":
        return 0
    if x == "Does not meet the credit policy. Status:Charged Off":
        return 0
    if x == "Does not meet the credit policy. Status:Fully Paid":
        return 1
    if x == "Fully Paid":
        return 1
    if x == "In Grace Period":
        return 1
    if x == "Issued":
        return 1
    if x == "Late (16-30 days)":
        return 0
    if x == "Late (31-120 days)":
        return 0
merge_df["loan_stat_num"] = merge_df["loan_status"].apply(loan_stat_num)

               
def grade_num(x):
    if x == "A":
        return 7
    if x == "B":
        return 6
    if x == "C":
        return 5
    if x == "D":
        return 4
    if x == "E":
        return 3
    if x == "F":
        return 2
    if x == "G":
        return 1
merge_df["grade_num"] = merge_df["grade"].apply(grade_num)

  
merge_df.word.value_counts().head(8)

vc_words = ["personal","debt","consolidation","credit","home","car","bills","wedding"]

import nltk
from nltk.corpus import wordnet

merge_df['cat'] = ""
merge_df['cat'] = merge_df['cat'].astype(str)

def syns(target_word):
    wedding_syn = []
    for syn in wordnet.synsets(target_word):
        for l in syn.lemmas():
            wedding_syn.append(l.name())
    #maybe add if thens to add weird corner cases to the syn list
    #like motorcycle for car
    if target_word=='car':
        wedding_syn.append('motorcycle')
    for i, row in merge_df.iterrows():
        if merge_df['word'][i] in wedding_syn:
            merge_df.set_value(i,'cat',target_word)
            
syns('wedding')
syns('home')
syns('car')
syns('medical')
syns('vacation')
syns('business')

merge_df['cat'].value_counts()


#prepping for scm
cat = merge_df.loc[merge_df['cat'] != ""]
cat = cat.loc[cat['cat'] == "home"]


#wedding and car work best

svm_df = cat[["int_rate","dti","cat"]]

svm_df.to_csv('svm_df.csv')


#submit zip folder containing:
#code, report, dataset 

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression as LR
from sklearn.cross_validation import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
import math

category_list = ["home", "wedding", "medical", "business", "car", "vacation"]
def Loan_Function():
    Q1 = input("Please choose a loan category: home, wedding, medical, business, car, vacation:" )
    if Q1.lower() in category_list:
        Q1 = Q1.lower()
        df = cat.copy(deep=True)
        df['cat'] = Q1
        
        '''separate testing and training data'''    
        Train, Test = train_test_split(data, test_size=0.30, random_state=42)
        xTrain =Train["int_rate"]
        xTest = Test["int_rate"]
        yTrain = Train["loan_stat_num"]
        yTest = Test["loan_stat_num"]
        xTrain = xTrain.reshape(-1,1)
        xTest = xTest.reshape(-1,1)
        yTrain = yTrain.astype(np.float)
        yTest  = yTest.astype(np.float)
        
        '''build model'''
        Model1 = LR()
        Model1.fit(xTrain, yTrain)
        yPredTest = Model1.predict(xTest)
        A = Model1.coef_[0]
        b = Model1.intercept_
        
        print ("Here's the formula: y =  1/(1+(math.exp(-({0}X +{1}))))".format(A,b))
        Q2 = input("What is the interest rate of the loan?")
        int_rate = float(Q2)
        X = Model1.predict_proba(int_rate)
        print ("For loans in the {0} category, at an intertest rate of {1}, the probability of success is {2} and probability of failue is {3}".format(Q1,int_rate,X[:,1],X[:,0]))

    else:
        print ("That is not a possible category. Please check your spelling or choose again!")

Loan_Function()


#for creating plotly graph in plotly
import plotly
import plotly.plotly as py
import plotly.graph_objs as go
plotly.tools.set_credentials_file(username='ERych', api_key='7fwe7xtrqt')
 

x = []
for item in vc_words:
    x.append(merge_df.loc[merge_df['word'] == item, "loan_stat_num"].mean())
    
y = []
for item in vc_words:
    y.append(merge_df.loc[merge_df['word'] == item, "grade_num"].mean())

size = []
for item in vc_words:
    num = merge_df.loc[merge_df['word'] == item, "loan_amnt"].mean()
    num1 = num/100
    size.append(num1)

name = []
for item in vc_words:
    name.append(item)

trace0 = go.Scatter(
    x=x,
    y=y,
    text=['Personal', 'Debt', 'Consolidation', 'Credit', 'Home;','Car','Bills','Wedding'],
    mode='markers',
    marker=dict(
        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],
        size=size,
    )
)

data = [trace0]
py.plot(data, filename='bubblechart-text')


#testing the github collaborative environment
