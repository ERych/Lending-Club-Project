import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
import sklearn
from string import punctuation
from pandas import Series, DataFrame

from sklearn import metrics
from sklearn.cross_validation import cross_val_score

data = pd.read_csv("/Users/lizdeschaine/Documents/DATS6102/loan.csv", usecols=("purpose", "title","id"))

#makes the values string
data['title'] = data['title'].astype(str)

#creates a list of all titles under purpose = other
other_index = data[data['purpose'] == "other"].index.tolist()

bad_list =['if','the',"on","and","for","my", "to", "a", "off", "pay", "loan", "other", "payoff"]


key_list = []
word_list=[]
for i in other_index:
    local_list=[]
    local_list = data['title'][i].split()
    for word in local_list:
        word = word.lower()   
        for p in list(punctuation):
            word=word.replace(p,'')
        if word not in bad_list:
            word_list.append(word)
            key_list.append(data['id'][i])

words_df = pd.DataFrame()
words_df['id'] = key_list
words_df['word'] = word_list

#merge data 
full_data = pd.read_csv("/Users/lizdeschaine/Documents/DATS6102/loan.csv")
#only use the first 30 columns
full_data = full_data.ix[:,:30]
#merge
merge_df = pd.merge(full_data, words_df, on='id')


def loan_stat_num(x):
    if x == "Charged Off":
        return 0
    if x == "Current":
        return 1
    if x == "Default":
        return 0
    if x == "Does not meet the credit policy. Status:Charged Off":
        return 0
    if x == "Does not meet the credit policy. Status:Fully Paid":
        return 1
    if x == "Fully Paid":
        return 1
    if x == "In Grace Period":
        return 1
    if x == "Issued":
        return 0
    if x == "Late (16-30 days)":
        return 0
    if x == "Late (31-120 days)":
        return 0
merge_df["loan_stat_num"] = merge_df["loan_status"].apply(loan_stat_num)

               
def grade_num(x):
    if x == "A":
        return 7
    if x == "B":
        return 6
    if x == "C":
        return 5
    if x == "D":
        return 4
    if x == "E":
        return 3
    if x == "F":
        return 2
    if x == "G":
        return 1
merge_df["grade_num"] = merge_df["grade"].apply(grade_num)


vc_words = ["personal","debt","consolidation","credit","home","car","bills","wedding"]

import nltk
from nltk.corpus import wordnet

merge_df['cat'] = ""
merge_df['cat'] = merge_df['cat'].astype(str)

def syns(target_word):
    local_list = []
    for syn in wordnet.synsets(target_word):
        for l in syn.lemmas():
            local_list.append(l.name())
    #maybe add if thens to add weird corner cases to the syn list
    #like motorcycle for car
    if target_word=='car':
        local_list.append('motorcycle')
    if target_word=='medical':
        local_list.append('dental')
    for i, row in merge_df.iterrows():
        if merge_df['word'][i] in local_list:
            merge_df.set_value(i,'cat',target_word)
            
syns('wedding')
syns('home')
syns('car')
syns('medical')
syns('vacation')
syns('business')

cat = merge_df.loc[merge_df['cat'] != ""]


'''regression section'''
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression as LR
from sklearn.cross_validation import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
import math

def Loan_Function():
    goodAnswer=False
    while(goodAnswer!=True):
        Q1 = input("Please choose a loan category: home, wedding, medical, business, car, vacation:" )
        if Q1.lower() in category_list:
            goodAnswer=True
            Q1 = Q1.lower()
            df = cat.copy(deep=True)
            df['cat'] = Q1

            '''separate testing and training data'''    
            Train, Test = train_test_split(df, test_size=0.30, random_state=42)
            xTrain =Train["int_rate"]
            xTest = Test["int_rate"]
            yTrain = Train["loan_stat_num"]
            yTest = Test["loan_stat_num"]
            xTrain = xTrain.reshape(-1,1)
            xTest = xTest.reshape(-1,1)
            yTrain = yTrain.astype(np.float)
            yTest  = yTest.astype(np.float)

            '''build model'''
            Model1 = LR()
            Model1.fit(xTrain, yTrain)
            yPredTest = Model1.predict(xTest)
            A = Model1.coef_[0]
            b = Model1.intercept_

            def is_number(Q2):
                try:
                    float(Q2)
                    return True
                except ValueError:
                    return False
            
            print ("Here's the formula for our logistic regression model:\n y =  1/(1+(math.exp(-({0}X +{1}))))".format(A,b))
            Q2=''
            while (is_number(Q2) == False):
                Q2 = input("What is the interest rate of the loan? ")
             
            #to account for user entering decimal instead of integer
            int_rate = float(Q2)
            if int_rate < 1:
                int_rate =  int_rate*100
            X = Model1.predict_proba(int_rate)
            print ("For loans in the {0} category, at an interest rate of {1}: \nthe probability of success is {2} \nand probability of failure is {3}".format(Q1,int_rate,X[:,1],X[:,0]))

        else:
            print ("That is not a possible category. Please check your spelling or choose again!")


Loan_Function()

